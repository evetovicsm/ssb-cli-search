#!/usr/bin/env python3

import sys
import argparse
import configparser
import requests
import urllib3
from getpass import getpass
from requests.utils import cookiejar_from_dict


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def get_cmd_args():
	parser = argparse.ArgumentParser(prog="ssb-search", description="Search SSB logspace from the command line")
	parser.add_argument("--ssb_appliance", help="The hostname or ip address of the SSB appliance.")
	parser.add_argument("--logspace", help="The name of the logspace to search in.")
	parser.add_argument("search_term", help="The search expression to search for.")
	parser.add_argument("--from-timestamp", type=int, default=0, help="The starting timestamp for search. Default to 0.")
	parser.add_argument("--to-timestamp", type=int, default=9999999999, help="The ending timestamp for the search. Defaults to 9999999999.")
	parser.add_argument("--offset", type=int, default=0, help="If the number of search result is greater then the set limit. Send result dataset by this offset.")
	parser.add_argument("--limit", type=int, default=100, help="Limit search results, defaults to 100")
	return parser.parse_args()

def get_config(file="ssb-cli-search.cfg" , section="DEFAULT"):
	config = configparser.ConfigParser()
	config[section]['SSB_APPLIANCE'] = ""
	config[section]['LOGSPACE_NAME'] = ""
	config[section]['USERNAME'] = ""
	config[section]['PASSWORD'] = ""
	config.read(file)

	return config[section]

def login(ssb_appliance, login_username = None, login_password = None):

	login_url = f"https://{ssb_appliance}/api/1/login"

	print("===========================")
	print("Logging in to SSB appliance")
	print("===========================")
	username = login_username
	password = login_password
	if not username:
		username = input("Username:")
	if not password:
		password = getpass()
	auth_data = {"username": f"{username}", "password": f"{password}"}
	auth_response = requests.post(login_url, data=auth_data, verify=False)
	login_data = auth_response.json()
	if login_data['result'] is None:
		sys.exit("Authetication failed")
	return login_data['result']

def logout(ssb_appliance, session=None):
	logout_url = f"https://{ssb_appliance}/api/1/logout"
	print("===========================")
	print("Logging out from SSB appliance")
	print("===========================")
	auth_response = session.get(logout_url, verify=False)
	if auth_response.status_code == 403:
		sys.exit("Logout failed")
	print("Logout succeeded")

def create_session(session_id):
	auth_cookie = cookiejar_from_dict({"AUTHENTICATION_TOKEN": f"{session_id}"})
	session = requests.session()
	session.cookies.update(auth_cookie)
	return session

def search(ssb_appliance, logspace_name, search_term, from_timestamp, to_timestamp,  offset, limit , session = None):
	if session is None:
		sys.exit("NO valid session found. Please log in first!")
	search_url = f"https://{ssb_appliance}/api/1/search/logspace/filter/{logspace_name}?from={from_timestamp}&to={to_timestamp}&search_expression={search_term}&offset={offset}&limit={limit}"
	search_response = session.get(search_url, verify=False)
	return search_response.json()


def main():
	CONFIG = get_config()
	args = get_cmd_args()
	SEARCH_TERM =  args.search_term 
	FROM_TIMESTAMP = args.from_timestamp
	TO_TIMESTAMP = args.to_timestamp
	OFFSET = args.offset
	LIMIT = args.limit


	if not(CONFIG['SSB_APPLIANCE'] or args.ssb_appliance):
		sys.exit("The SSB appliance IP/HOSTNAME must be set either by command line --ssb_appliance parameter or setting SSB_APPLIANCE in the config file.")
	if not(CONFIG['LOGSPACE_NAME'] or args.logspace):
		sys.exit("The logspace name must be set either by command line --logspace parameter or setting LOGSPACE_NAME in the config file.")
	
	SSB_APPLIANCE = args.ssb_appliance or CONFIG['SSB_APPLIANCE']
	LOGSPACE_NAME = args.logspace or CONFIG['LOGSPACE_NAME']
 

 
	SESSION_ID = login(SSB_APPLIANCE, CONFIG['USERNAME'], CONFIG['PASSWORD'])
	SESSION = create_session(session_id=SESSION_ID)
	print(f"Searching in [SSB Appliance]:{SSB_APPLIANCE} - [LOGSPACE]:{LOGSPACE_NAME} - [SEARCH_TERM]:{SEARCH_TERM}")

	search_results = search(SSB_APPLIANCE, LOGSPACE_NAME, SEARCH_TERM, FROM_TIMESTAMP, TO_TIMESTAMP, OFFSET, LIMIT, SESSION)

	if len(search_results['result']) == 0:
		sys.exit("Search term not found!")
	for search_result in search_results['result']:
		print(f"{search_result['message']}")
	logout(SSB_APPLIANCE,SESSION)

if __name__ == "__main__":
	main()
